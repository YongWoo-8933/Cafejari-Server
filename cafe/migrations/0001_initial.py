# Generated by Django 4.2.1 on 2023-09-12 16:52

import cafe.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=31, unique=True)),
                ('image', models.ImageField(blank=True, default=None, null=True, upload_to=cafe.models.brand_image_upload_path)),
                ('has_item', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'cafe_brand',
                'db_table_comment': '카페의 브랜드 구분 모델',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Cafe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_visible', models.BooleanField(default=True)),
                ('is_closed', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=63)),
                ('address', models.CharField(max_length=63)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
            ],
            options={
                'db_table': 'cafe_cafe',
                'db_table_comment': '카페 모델',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CafeFloor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('floor', models.IntegerField(default=1)),
                ('has_seat', models.BooleanField(default=True)),
                ('wall_socket_rate', models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=3, null=True)),
                ('restroom', models.CharField(blank=True, default=None, max_length=31, null=True)),
            ],
            options={
                'db_table': 'cafe_cafe_floor',
                'db_table_comment': '카페 각 층 모델',
                'ordering': ['cafe__name'],
            },
        ),
        migrations.CreateModel(
            name='CafeImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_visible', models.BooleanField(default=True)),
                ('image', models.ImageField(upload_to=cafe.models.cafe_image_upload_path)),
            ],
            options={
                'db_table': 'cafe_cafe_image',
                'db_table_comment': '카페 사진 모델',
                'ordering': ['cafe__name'],
            },
        ),
        migrations.CreateModel(
            name='CafeTypeTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_openness', models.BooleanField()),
                ('is_coffee_focused', models.BooleanField()),
                ('is_work_friendly', models.BooleanField()),
            ],
            options={
                'db_table': 'cafe_cafe_type_tag',
                'db_table_comment': 'CATI 구분을 위한 type tag 모델',
                'ordering': ['cafe__name'],
            },
        ),
        migrations.CreateModel(
            name='CafeVIP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('update_count', models.IntegerField()),
            ],
            options={
                'db_table': 'cafe_cafe_vip',
                'db_table_comment': '각 카페의 vip',
                'ordering': ['-update_count'],
            },
        ),
        migrations.CreateModel(
            name='CongestionArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=31, unique=True)),
                ('category', models.CharField(max_length=15)),
                ('current_congestion', models.CharField(choices=[('여유', '여유'), ('보통', '보통'), ('약간 붐빔', '약간 붐빔'), ('붐빔', '붐빔')], default='여유')),
                ('south_west_latitude', models.FloatField()),
                ('south_west_longitude', models.FloatField()),
                ('north_east_latitude', models.FloatField()),
                ('north_east_longitude', models.FloatField()),
            ],
            options={
                'db_table': 'cafe_congestion_area',
                'db_table_comment': '혼잡도 정보 제공받는 지역',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DailyActivityStack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('update', models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
            options={
                'db_table': 'cafe_daily_activity_stack',
                'db_table_comment': '당일 혼잡도 공유 활동 스택',
                'ordering': ['-update'],
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=15)),
                ('gu', models.CharField(max_length=15)),
                ('dong', models.CharField(blank=True, default=None, max_length=15, null=True)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
            ],
            options={
                'db_table': 'cafe_district',
                'db_table_comment': '지역 구분 모델, oo시 oo구 까지',
                'ordering': ['city', 'gu', 'dong'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=31)),
                ('image', models.ImageField(upload_to=cafe.models.location_image_upload_path)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
            ],
            options={
                'db_table': 'cafe_location',
                'db_table_comment': '깃발 지역',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='OccupancyRatePrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('occupancy_rate', models.DecimalField(decimal_places=2, max_digits=3)),
                ('update', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'cafe_occupancy_rate_prediction',
                'db_table_comment': '카페 층별 좌석 점유율 예측값',
                'ordering': ['update', 'occupancy_rate'],
            },
        ),
        migrations.CreateModel(
            name='OpeningHour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mon', models.CharField(max_length=31)),
                ('tue', models.CharField(max_length=31)),
                ('wed', models.CharField(max_length=31)),
                ('thu', models.CharField(max_length=31)),
                ('fri', models.CharField(max_length=31)),
                ('sat', models.CharField(max_length=31)),
                ('sun', models.CharField(max_length=31)),
                ('cafe', models.OneToOneField(db_column='cafe', on_delete=django.db.models.deletion.CASCADE, related_name='opening_hour', to='cafe.cafe')),
            ],
            options={
                'db_table': 'cafe_opening_hour',
                'db_table_comment': '카페 영업 시간 모델',
                'ordering': ['cafe__name'],
            },
        ),
        migrations.CreateModel(
            name='OccupancyRateUpdateLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('occupancy_rate', models.DecimalField(decimal_places=2, max_digits=3)),
                ('update', models.DateTimeField(auto_now_add=True)),
                ('point', models.IntegerField(default=0)),
                ('is_notified', models.BooleanField(default=False)),
                ('cafe_floor', models.ForeignKey(blank=True, db_column='cafe_floor', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='occupancy_rate_update_log', to='cafe.cafefloor')),
            ],
            options={
                'db_table': 'cafe_occupancy_rate_update_log',
                'db_table_comment': '좌석 점유율 업데이트 로그',
                'ordering': ['-update'],
            },
        ),
    ]
