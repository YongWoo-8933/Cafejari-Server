# Generated by Django 4.2.1 on 2023-09-12 16:52

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import user.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('cafe', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, default=None, max_length=15, null=True)),
                ('email', models.EmailField(blank=True, default=None, max_length=63, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user_user',
                'db_table_comment': '유저',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step', models.IntegerField(unique=True)),
                ('name', models.CharField(max_length=31, unique=True)),
                ('description', models.TextField(blank=True, default=None, null=True)),
                ('image', models.ImageField(blank=True, default=None, null=True, upload_to=user.models.grade_image_upload_path)),
                ('sharing_count_requirement', models.IntegerField()),
                ('sharing_restriction_per_cafe', models.IntegerField()),
                ('activity_stack_restriction_per_day', models.IntegerField()),
            ],
            options={
                'db_table': 'user_grade',
                'db_table_comment': '유저 등급',
                'ordering': ['step', 'name'],
            },
        ),
        migrations.CreateModel(
            name='NicknameAdjective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=4, unique=True)),
                ('length', models.IntegerField()),
            ],
            options={
                'db_table': 'user_nickname_adjective',
                'db_table_comment': '닉네임 자동생성 형용사 후보',
                'ordering': ['length', 'value'],
            },
        ),
        migrations.CreateModel(
            name='NicknameNoun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=5, unique=True)),
                ('type', models.CharField(choices=[('커피', '커피'), ('라떼', '라떼'), ('논커피', '논커피'), ('티', '티'), ('디저트', '디저트')])),
            ],
            options={
                'db_table': 'user_nickname_noun',
                'db_table_comment': '닉네임 자동생성 명사 후보',
                'ordering': ['type', 'value'],
            },
        ),
        migrations.CreateModel(
            name='ProfileImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_default', models.BooleanField(default=True)),
                ('image', models.ImageField(upload_to=user.models.profile_image_upload_path)),
            ],
            options={
                'db_table': 'user_profile_image',
                'db_table_comment': '유저 프로필 이미지 모델',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(max_length=15, unique=True)),
                ('gender', models.IntegerField(blank=True, choices=[(0, '남성'), (1, '여성')], default=None, null=True)),
                ('age_range', models.CharField(blank=True, choices=[('0~9', '0~9'), ('10~19', '10~19'), ('20~29', '20~29'), ('30~39', '30~39'), ('40~49', '40~49'), ('50~59', '50~59'), ('60~69', '60~69'), ('70~79', '70~79'), ('80~89', '80~89'), ('90~', '90~')], default=None, max_length=15, null=True)),
                ('date_of_birth', models.CharField(blank=True, default=None, max_length=4, null=True)),
                ('phone_number', models.CharField(blank=True, default=None, max_length=8, null=True)),
                ('point', models.IntegerField(default=0)),
                ('marketing_push_enabled', models.BooleanField(default=False)),
                ('occupancy_push_enabled', models.BooleanField(default=True)),
                ('log_push_enabled', models.BooleanField(default=True)),
                ('fcm_token', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('favorite_cafe', models.ManyToManyField(blank=True, db_column='favorite_cafe', related_name='user', to='cafe.cafe')),
                ('grade', models.ForeignKey(blank=True, db_column='grade', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profile', to='user.grade')),
                ('profile_image', models.ForeignKey(blank=True, db_column='profile_image', default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profile', to='user.profileimage')),
                ('user', models.OneToOneField(db_column='user', on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profile',
                'db_table_comment': '프로필',
                'ordering': ['-user__date_joined'],
            },
        ),
    ]
